#1  [done]          design icon
#2  [done]          design app draft
#3  [done]          protoype app draft
#4  [done]          ensure offline usage
#5  [done]          implement new scoring system
#6  [done]          training page which always shows the password with minimal
                    lock time & maximum punish score first
#7                  create reusable ui widget for showing / guessing password
#8  [done]          convert manage-page into add-dialog
#9                  buttons for adding / deleting current password

#10 [done]          localStorage persistence
#11 [done]          display fee points instead of fee time
#12 [done]          lock input field while lock time hours left
#13 [done]          export/import page (copy & paste from text field)
#14 [done]          generate test fixtures by generation method
#15                 display lock time display using cake diagram
#16                 display fee using cake diagram
#17                 click on cake diagram should open dialog with input field
#18 [done]          refactoring: obey single abstraction layer rule
#19 [done]          format exported JSON string
#20 [done]          refactoring: use call() for local methods
#21 [done]          show a list of all passwords and its status in password manage page
#22 [done]          implement salted password hashing / checking
#23 [done]          unit tests for JSONFormatter
#24 [done]          unit tests for MD5PasswordHasher
#25 [done]          unit tests for SaltGenerator
#26 [done]          unit tests for LeveledScoreFormatter
#27 [done]          unit tests for PasswordRegistrationCollection
#28 [done]          refactor PasswordRegistrationCollection: replace implicit dependency to LeveledScore with comparator interface
#29 [done]          introduce IApplicationModel interface containing potentially different facettes (like PasswordRegistrationsCollection)
#30                 extend unit tests of IPasswordRegistrationsCollection to import() and export() methods